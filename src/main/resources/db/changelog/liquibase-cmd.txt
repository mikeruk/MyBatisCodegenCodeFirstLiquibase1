
                                    NB !!!

                CHOOSE weather to execute liquibase changesets
                            - upon App Build Button
                            - or via terminal command line:

If you run/build the project from inside the IntelliJ IDE, it uses the application.yml configuration
and executes all changesets accordingly, then you need to define rollback contexts explicitly, etc.

                # NB !!! NEVER USE BOTH approaches simultaneously!
If you decide to use the command line, IT CREATES separate files: LIQUIBASECHANGELOG and LIQUIBASECHANGELOGLOCK
Then if you use the App Build Button, it will create new other files: LIQUIBASECHANGELOG and LIQUIBASECHANGELOGLOCK



       I chose the terminal cli approach, because it's easier to run single rollbacks.

FIRST, define liquibase.properties file. source: https://docs.liquibase.com/concepts/connections/creating-config-properties.html
I created it in the main project root folder. This allows my to run only:
    liquibase update  - and it detects the properties in that file automatically.

If I create the file on another place or inside another folder, then I must run:
    liquibase --defaultsFile=path/to/liquibase.properties update

IF you don't create any liquibase.properties file, you have to pass the arguments manually on the command line,
like so: (Arguments passed on the command line will overwrite any properties in the liquibase.properties.)
# To execute an 'install liquibase script' - run the below command and use the 'update' flag:
    liquibase --changeLogFile=src/main/resources/db/changelog/changelog-root.xml --url=jdbc:postgresql://localhost:5444/liquibase-test1 --username=postgres --password=myPassword update

# To execute a rollback only for the last applied changeset - run the below command and use the 'rollbackCount 1' flag:
    liquibase --changeLogFile=src/main/resources/db/changelog/changelog-root.xml --url=jdbc:postgresql://localhost:5444/liquibase-test1 --username=postgres --password=myPassword rollbackCount 1

# Rollback to the initial state (before any changesets were applied):
If you haven't used tags, you can roll back to the initial state by specifying the oldest date (before any changesets were applied):
    liquibase rollbackToDate YYYY-MM-DDTHH:MM:SS

# Rollback to a specific tag - This will roll back all changesets applied after the tag.:
    liquibase rollback myTag

# Use rollbackCount with a High Number:
    liquibase rollbackCount <total_number_of_changesets>

# Use rollback to an Empty Database:
    liquibase rollbackCount <total_number_of_changesets_applied>
# you can query the DATABASECHANGELOG table, like this:
SELECT COUNT(*) FROM DATABASECHANGELOG;


# To clear the checksums:
    liquibase --changeLogFile=src/main/resources/db/changelog/changelog-root.xml --url=jdbc:postgresql://localhost:5444/liquibase-test1 --username=postgres --password=myPassword clearCheckSums
# and then create same 'command script file', but with new ID, because the previous ID is stored in the
# 'databasechangelog' table and will not allow you to repeat same ID again.
